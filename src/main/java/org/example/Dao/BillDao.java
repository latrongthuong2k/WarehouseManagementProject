package org.example.Dao;

import org.example.App;
import org.example.Dto.LoginResultDto;
import org.example.Model.Bill;
import org.example.Model.Bill_Detail;
import org.example.Presentation.LoginMenu;
import org.example.Util.ColorText;
import org.example.Util.DbConnection;
import org.example.Util.Notification;
import org.example.Util.Validate;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Scanner;

public class BillDao {
    public static void displayBill(boolean billType, String empId, String billStatusNumber) throws SQLException, ClassNotFoundException {
        String storedProc = "{call GetAllBills(?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            cs.setBoolean(1, billType);
            cs.setString(2, empId);
            cs.setString(3, billStatusNumber);
            ResultSet rs = cs.executeQuery();
            String titleUpperCase = space(45) + "‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá " + "B·∫£ng th√¥ng tin phi·∫øu " + getTypeName(billType) + " ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá ‚óá";
            System.out.println(ColorText.CYAN_BRIGHT + titleUpperCase.toUpperCase() + ColorText.RESET);
            designTableForResultSet(rs);
        }
    }

    private static void designPageForResultSet(ResultSet rs) throws SQLException {
        if (!rs.isBeforeFirst()) {
            System.out.printf("‚éú %-15s", "No Data");
            System.out.printf("‚éú %-20s", "No Data");
            System.out.printf("‚éú %-20s", "No Data");
            System.out.printf("‚éú %-25s", "No Data");
            System.out.printf("‚éú %-20s", "No Data");
            System.out.printf("‚éú %-20s", "No Data");
            System.out.printf("‚éú %-20s", "No Data");
            System.out.printf("‚éú %-15s‚éú\n", "No Data");
        } else
            while (rs.next()) {
                // Hi·ªÉn th·ªã th√¥ng tin nh√¢n vi√™n
                System.out.printf("‚éú %-15s", rs.getString("Bill_id"));
                System.out.printf("‚éú %-20s", rs.getString("Bill_Code"));
                System.out.printf("‚éú %-20s", rs.getBoolean("Bill_Type") ? "Phi·∫øu xu·∫•t" : "Phi·∫øu nh·∫≠p");
                System.out.printf("‚éú %-25s", rs.getString("Emp_id_created"));
                System.out.printf("‚éú %-20s", rs.getString("Created"));
                System.out.printf("‚éú %-20s", rs.getString("Emp_id_auth") == null ? "No Data" :
                        rs.getString("Emp_id_auth"));
                System.out.printf("‚éú %-20s", rs.getString("Auth_date") == null ? "No Data" :
                        rs.getString("Auth_date"));
                String status = null;
                int numStatus = rs.getInt("Bill_Status");
                switch (numStatus) {
                    case 0 -> status = "T·∫°o";
                    case 1 -> status = "Hu·ª∑";
                    case 2 -> status = "Duy·ªát";
                }
                System.out.printf("‚éú %-14s ‚éú\n", status);
            }
    }

    private static void turnColor(String text, int with) {
        System.out.printf("‚éú " + ColorText.WHITE_BRIGHT + "%-" + with + "s" + ColorText.RESET, text);
    }

    public static void border() {
        String slag = "‚è§";
        System.out.println(ColorText.WHITE_BRIGHT + "‚óá" + slag.repeat(89) + "‚óá" + ColorText.RESET);
    }

    public static String space(int repeatNumber) {
        String slag = " ";
        return slag.repeat(repeatNumber);
    }

    private static void designTableForResultSet(ResultSet rs) throws SQLException {
        // Title
        designTitle();
        // page
        designPageForResultSet(rs);
        border();
        System.out.println(); // c√°ch ra
        rs.close();
    }

    private static void designTitle() {
        border();
        turnColor("Bill ID ", 15);
        turnColor("Bill Code ", 20);
        turnColor("Bill_Type ", 20);
        turnColor("Emp_id_created ", 25);
        turnColor("Created ", 20);
        turnColor("Emp_id_auth ", 20);
        turnColor("Auth_date ", 20);
        System.out.printf("‚éú " + ColorText.WHITE_BRIGHT + "%-14s" + ColorText.RESET + " ‚éú\n", "Bill_Status ");
        border();
    }

    public static void createBill(Scanner scanner, boolean billType, String loginEmpId) throws SQLException, ClassNotFoundException {
        String storedProc = "{call CreateBill(?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            Bill bill = new Bill();
            bill.setBillType(billType);
            bill.setBillStatus(0); // create
            bill.setEmpIdCreated(loginEmpId);
            bill.inputData(scanner, App.loginResultDto.accountPermission());
            //
            cs.setString(1, bill.getBillCode());// bill code
            cs.setBoolean(2, bill.getBillType());// bill type
            cs.setString(3, bill.getEmpIdCreated());// EmpIdCreated
            cs.execute();
            // l·∫•y l·∫°i BillId khi ƒë√£ t·∫°o m·ªôt b·∫£ng ghi bill, v√¨ n√≥ auto tƒÉng n√™n l√† ph·∫£i l·∫•y l·∫°i sau khi t·∫°o
            bill.setBillId(getBillId(bill.getBillCode()));
            String productNameInput;
            do {
                Notification.successMessage("-> VIEW MODE <-");
                ProductDao.displayProducts(scanner);
                Notification.successMessage("-> CREATE MODE <-");
                Notification.inputPrint("Nh·∫≠p (t√™n) c√°c s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÉ ("
                        + getTypeName(billType) + ") ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ k·∫øt th√∫c t·∫°o Bill : ");
                Bill_Detail billDetail = new Bill_Detail();
                billDetail.setBillId(bill.getBillId());
                // choose product
                productNameInput = scanner.nextLine().trim();
                if (productNameInput.length() > 150) {
                    Notification.errorMessage("T√™n s·∫£n ph·∫©m v∆∞·ª£t qu√° 150 k√Ω t·ª±. H√£y th·ª≠ l·∫°i!");
                    continue;
                }
                if (productNameInput.equalsIgnoreCase("exit")) break;
                if (!ProductDao.checkExistProduct(null, productNameInput)) {
                    Notification.errorMessage("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
                    continue;
                }
                if (!ProductDao.isActiveProduct(null, productNameInput)) {
                    Notification.errorMessage("S·∫£n ph·∫©m hi·ªán ƒëang kh√¥ng ho·∫°t ƒë·ªông. H√£y ch·ªçn s·∫£n ph·∫©m kh√°c!");
                    continue;
                }
                String productId = getIdProduct(productNameInput);
                if (BillDao.checkExistBillDetail(bill.getBillId(), productId)) {
                    Notification.errorMessage("ƒê∆°n h√†ng v·ªõi s·∫£n ph·∫©m " + productNameInput +
                            " ƒë√£ t·ªìn t·∫°i kh√¥ng th·ªÉ th·ª±c hi·ªán t·∫°o m·ªõi, h√£y th·ª≠ l·∫°i!");
                    continue;
                }
                Notification.successMessage("‚úì SUCCESS!");
                billDetail.setProductId(productId);
                billDetail.setType(billType);
                billDetail.inputData(scanner, "th√™m m·ªõi");
                Bill_DetailDao.createBillDetail(billDetail);
            } while (true);
        }
    }

    public static void updateBill(Scanner scanner, boolean billType, String empId) throws SQLException, ClassNotFoundException {
        Notification.successMessage("-> VIEW MODE <-");
        displayBill(billType, empId, null);
        Notification.successMessage("-> UPDATE MODE <-");
        String storedProc = "{call UpdateBill(?,?,?,?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            String input; // Found id
            while (true) {
                Notification.inputPrint("Nh·∫≠p Bill_ID ho·∫∑c Bill_Code ƒë·ªÉ c·∫≠p nh·∫≠t, ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ hu·ª∑ v√† quay l·∫°i : ");
                Long parseBillId = null;
                String billCode = null;
                input = scanner.nextLine().trim();
                if (input.equalsIgnoreCase("exit")) return;
                // check not null not blank
                if (!Validate.isInputValid(input)) continue;
                // parse
                // check if the input is numeric
                if (isNumeric(input)) {
                    // Input is numeric
                    parseBillId = Long.parseLong(input);
                } else {
                    // Input is not numeric
                    if (input.length() > 10) {
                        Notification.errorMessage("Bill_Code kh√¥ng ƒë∆∞·ª£c nh·∫≠p qu√° 10 k√Ω t·ª±");
                        continue;
                    }
                    billCode = input;
                }
                // check t·ªìn t·∫°i parseBillId ho·∫∑c billCode
                if (!checkExistsBill(parseBillId, billCode, billType)) {
                    Notification.errorMessage("Kh√¥ng t·ªìn t·∫°i Bill ·ªü trong phi·∫øu " + getTypeName(billType) + ", h√£y th·ª≠ l·∫°i!");
                    continue;
                }
                if (empId != null)
                    if (!checkEmpIsAuthorizeToBill(parseBillId, billCode, empId)) {
                        Notification.waringMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a ƒë·ªïi tr√™n ho√° ƒë∆°n n√†y. H√£y th·ª≠ l·∫°i!");
                        continue;
                    }
                if (checkBillStatusIsApproved(parseBillId, billCode)) {
                    Notification.errorMessage("Bill b·∫°n ƒëang t√¨m ƒëang c√≥ s·∫µn nh∆∞ng n√≥ ƒë√£ ƒë∆∞·ª£c duy·ªát, " +
                            "h√£y th·ª≠ nh·∫≠p l·∫°i nh·∫≠p m√£ bill kh√°c ƒëi ·∫° üòä");
                    continue;
                }
                // call procGetName v√† set th√†nh t√™n cho ƒë·ªëi t∆∞·ª£ng ƒëang update
                Notification.inputPrint("OK gi·ªù nh·∫≠p c√°c tr∆∞·ªùng sau ƒë·ªÉ c·∫≠p nh·∫≠t");
                Bill bill = new Bill();
                // update bill, t·ª´ ƒë√¢y cho update l·∫°i status
                if (parseBillId == null) {
                    cs.setNull(1, Types.BIGINT); // BillId is null
                    bill.setBillCode(billCode); // bill code
                } else {
                    cs.setLong(1, parseBillId); // parseBillId (long) equal input
                    cs.setString(2, input);
                }
                // set origin
                bill.setBillType(billType);
                bill.setBillCode(input);
                // input data
                bill.inputData(scanner, App.loginResultDto.accountPermission());
                cs.setInt(3, bill.getBillStatus());
                cs.setString(4, bill.getEmpIdCreated());
                // d·ª±a tr√™n bill type ƒë·ªÉ c·∫≠p nh·∫≠t
                cs.setBoolean(5, billType);
                cs.setString(6, bill.getEmpIdCreated());
                // update bill detail
                cs.execute();
                Notification.waringMessage("* B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t lu√¥n (S·ªë l∆∞·ª£ng) v√† (Gi√°) c·ªßa s·∫£n ph·∫©m li√™n k·∫øt v·ªõi bill kh√¥ng ?\n"
                        + "* N·∫øu mu·ªën c·∫≠p nh·∫≠t th√¨ h√£y nh·∫≠p (update)\n"
                        + "* Ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ tr·ªü v·ªÅ menu");
                String choice;
                do {
                    choice = scanner.nextLine().trim().toLowerCase();
                    if (!Validate.isInputValid(input)) continue;
                    switch (choice) {
                        case "exit" -> {
                            Notification.successMessage("ƒê√£ tr·ªü v·ªÅ menu");
                            return;
                        }
                        case "update" -> {
//                            Bill_DetailDao.searchBillDetail(parseBillId, billCode, billType, empId);
                            Notification.inputPrint("OK gi·ªù nh·∫≠p c√°c tr∆∞·ªùng sau ƒë·ªÉ c·∫≠p nh·∫≠t");
                            // trong qu√° tr√¨nh nh·∫≠p s·∫Ω check t·ªìn t·∫°i s·∫£n ph·∫©m trong c√°c b·∫£ng product k·ªÉ c·∫£
                            // product c√≥ li√™n k·∫øt v·ªõi bill id trong b·∫£ng bill detail hay kh√¥ng
                            Bill_Detail billDetail = new Bill_Detail();
                            billDetail.setType(billType);
                            billDetail.inputData(scanner, "c·∫≠p nh·∫≠t");
                            // sau khi ƒë√£ validate, v√† check t·ªìn t·∫°i
                            updateBillDetail(
                                    billDetail.getBillId(),
                                    billDetail.getProductId(),
                                    billDetail.getQuantity(),
                                    billDetail.getPrice());
                        }
                        default -> {
                            Notification.errorMessage("L·ªánh nh·∫≠p kh√¥ng ƒë√∫ng, " +
                                    "l√∫c n√†y ch·ªâ ƒë∆∞·ª£c nh·∫≠p (exit) ho·∫∑c (update), h√£y th·ª≠ l·∫°i! ");
                            continue;
                        }
                    }
                    break;
                } while (true);
            }
        }
    }

    public static void updateBillDetail(Long billId, String productId, int quantity, float price) throws SQLException, ClassNotFoundException {
        String storedProc = "{call UpdateBillDetail(?,?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            cs.setLong(1, billId);
            cs.setString(2, productId);
            cs.setInt(3, quantity);
            cs.setFloat(4, price);
            cs.execute();
        }
    }

    public static boolean checkExistsBill(Long billId, String billCode, boolean billType) throws SQLException, ClassNotFoundException {
        String storedProc = "{call checkExistBill(?,?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            if (billId == null) {
                cs.setNull(1, Types.BIGINT);
                cs.setString(2, billCode);
            } else {
                cs.setLong(1, billId);
                cs.setString(2, billCode);

            }
            cs.setBoolean(3, billType);
            cs.registerOutParameter(4, Types.BOOLEAN);
            cs.execute();
            return cs.getBoolean(4);
        }
    }

    public static boolean checkBillStatusIsApproved(Long billId, String billCode) throws SQLException, ClassNotFoundException {
        String storedProc = "{call checkBillStatusIsApproved(?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            if (billId == null) {
                cs.setNull(1, Types.BIGINT);
                cs.setString(2, billCode);
            } else {
                String input = String.valueOf(billId);
                cs.setLong(1, billId);
                cs.setString(2, input);
            }
            cs.registerOutParameter(3, Types.BOOLEAN);
            cs.execute();
            return !cs.getBoolean(3);
        }
    }

    public static boolean checkEmpIsAuthorizeToBill(Long billId, String billCode, String empId) throws SQLException, ClassNotFoundException {
        String storedProc = "{call checkEmpIsAuthorizeToBill(?,?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            if (billId == null) {
                cs.setNull(1, Types.BIGINT);
                cs.setString(2, billCode);
            } else {
                String input = String.valueOf(billId);
                cs.setLong(1, billId);
                cs.setString(2, input);
            }
            cs.setString(3, empId);
            cs.registerOutParameter(4, Types.BOOLEAN);
            cs.execute();
            return cs.getBoolean(4);
        }
    }


//    public static Bill getBillById(Long billId) throws SQLException, ClassNotFoundException {
//        String storedProc = "{call getBillInfoById(?,?,?,?,?)}";
//        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
//            cs.setLong(1, billId);
//            cs.registerOutParameter(2, Types.VARCHAR); // bill code
//            cs.registerOutParameter(3, Types.BIT);  // bill type
//            cs.registerOutParameter(4, Types.CHAR); // Emp_id_created
//            cs.registerOutParameter(5, Types.CHAR); // Emp_id_auth
//            cs.execute();
//            Bill bill = new Bill();
//            bill.setBillCode(cs.getString(2));
//            bill.setBillType(cs.getBoolean(3));
//            bill.setEmpIdCreated(cs.getString(4));
//            bill.setEmpIdAuth(cs.getString(5));
//            return bill;
//        }
//    }

    public static boolean checkExistBillDetail(Long billId, String productId) throws SQLException, ClassNotFoundException {
        String storedProc = "{call CheckExistBillDetail(?,?,?)}";
        try (CallableStatement stmt = DbConnection.getConnection().prepareCall(storedProc)) {
            stmt.setLong(1, billId);
            stmt.setString(2, productId);
            stmt.registerOutParameter(3, Types.BOOLEAN);
            stmt.execute();
            return stmt.getBoolean(3);
        }
    }

    private static String getIdProduct(String productName) throws SQLException, ClassNotFoundException {
        String storedProc = "{call getIdProduct(?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            cs.setString(1, productName);
            ResultSet rs = cs.executeQuery();
            if (rs.next()) return rs.getString("Product_Id");
            else {
                return null;
            }
        }
    }

    public static Long getBillId(String billCode) throws SQLException, ClassNotFoundException {
        String storedProc = "{call Get_Bill_Id(?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            cs.setString(1, billCode);
            ResultSet rs = cs.executeQuery();
            if (rs.next()) return rs.getLong("Bill_id");
            else {
                Notification.errorMessage("Kh√¥ng c√≥ b·∫£n ghi Bill_id n√†o c√≥ bill_Code l√† : " + billCode);
                return null;
            }
        }
    }

    public static String getTypeName(boolean type) {
        if (type) return "xu·∫•t";
        else return "nh·∫≠p";
    }

    public static boolean isNumeric(String input) {
        return input.matches("\\d+");
    }


//    public static String getAuthIdBill(Long billId, String billCode) throws SQLException, ClassNotFoundException {
//        String storedProc = "{call GetAuthIdBill(?,?)}";
//        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
//            if (billId == null) {
//                cs.setNull(1, Types.BIGINT);
//                cs.setString(2, billCode);
//            } else {
//                String input = String.valueOf(billId);
//                cs.setLong(1, billId);
//                cs.setString(2, input);
//            }
//            ResultSet rs = cs.executeQuery();
//            if (rs.next()) return rs.getString("Emp_id_auth");
//            else {
//                Notification.errorMessage("Emp_Auth_id n√†y kh√¥ng ƒë∆∞·ª£c li√™n k·∫øt v·ªõi bill_id : " + billId);
//                return null;
//            }
//        }
//    }


//    private static boolean checkAuthorise(String empId, Long billId, String billCode) throws SQLException, ClassNotFoundException {
//        String authId = getAuthIdBill(billId, billCode);
//        return authId.equals(empId);
//    }

    public static void approveBill(Scanner scanner, boolean billType, String loginAccEmpId) throws SQLException, ClassNotFoundException {
        displayBill(billType, null, null);
        Long billId;
        String billCode;
        String input;
        do {
            billId = null;
            billCode = null;
            Notification.inputPrint("Nh·∫≠p bill_id ho·∫∑c bill_code ƒë·ªÉ duy·ªát ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ tho√°t");
            input = scanner.nextLine().trim();
            if (!Validate.isInputValid(input)) continue;
            if (input.equalsIgnoreCase("exit")) return;
            // ki·ªÉm tra not blank not null
            // Tu·ª≥ theo bill_id ho·∫∑c bill code ƒë·ªÉ duy·ªát
            if (isNumeric(input)) billId = Long.parseLong(input);
            else {
                if (input.length() > 10) {
                    Notification.errorMessage("Bill_Code kh√¥ng ƒë∆∞·ª£c nh·∫≠p qu√° 10 k√Ω t·ª±");
                    continue;
                }
                billCode = input;
            }
            // ki·ªÉm tra t·ªìn t·∫°i trong phi·∫øu nh·∫≠p ho·∫∑c xu·∫•t
            if (!checkExistsBill(billId, billCode, billType)) {
                Notification.errorMessage("Kh√¥ng t·ªìn t·∫°i Bill ·ªü trong phi·∫øu " + getTypeName(billType) + ", h√£y th·ª≠ l·∫°i!");
                continue;
            }
            // ki·ªÉm tra n√≥ d√£ ƒë∆∞·ª£c duy·ªát ch∆∞a
            if (checkBillStatusIsApproved(billId, billCode)) {
                Notification.errorMessage("Bill b·∫°n ƒëang t√¨m ƒëang c√≥ s·∫µn nh∆∞ng n√≥ ƒë√£ ƒë∆∞·ª£c duy·ªát, " +
                        "h√£y th·ª≠ nh·∫≠p l·∫°i nh·∫≠p m√£ bill kh√°c ƒëi ·∫° üòä");
                continue;
            }
            if (billType) { // true : phi·∫øu xu·∫•t
                if (!Bill_DetailDao.checkValidQuantityToSales(billId, billCode)) {
                    Notification.errorMessage("Kh√¥ng th·ªÉ duy·ªát bill n√†y v√¨ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß. " +
                            "H√£y ch·ªçn bill kh√°c!");
                    continue;
                }
            }
            break;
        } while (true);

        String storedProc = "{call ApproveBill(?,?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            if (billId == null) {
                cs.setNull(1, Types.BIGINT);
                cs.setString(2, billCode);
            } else {
                String billIdToString = String.valueOf(billId);
                cs.setLong(1, billId);
                cs.setString(2, billIdToString);

            }
            cs.setBoolean(3, billType);
            cs.setString(4, loginAccEmpId); // set emp_id_Auth khi duy·ªát
            cs.execute();
        }
        Notification.successMessage("Phi·∫øu ƒë√£ ƒë∆∞·ª£c duy·ªát");
    }

//    public static void approveBillWhenSearch(Scanner scanner,
//                                             ResultSet rs,
//                                             boolean billType,
//                                             String loginAccEmpId) throws SQLException, ClassNotFoundException {
//        String input;
//        do {
//            Notification.inputPrint("Nh·∫≠p (yes) ƒë·ªÉ duy·ªát t·∫•t c·∫£ k·∫øt qu·∫£ t√¨m ki·∫øm Bill c√≥ status l√† (t·∫°o) ," +
//                    " ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ hu·ª∑ duy·ªát v√† quay l·∫°i : ");
//            input = scanner.nextLine().trim();
//            if (!Validate.isInputValid(input)) continue;
//            if (input.equalsIgnoreCase("exit")) return;
//            if (!input.equalsIgnoreCase("yes")) {
//                Notification.errorMessage("L·ªánh nh·∫≠p kh√¥ng ƒë√∫ng h√£y nh·∫≠p l·∫°i!, ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ hu·ª∑ duy·ªát ");
//                continue;
//            }
//            break;
//        } while (true);
//        String storedProc = "{call ApproveBill(?,?,?,?)}";
//        while (rs.next()) {
//            try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
//                cs.setLong(1, rs.getLong("Bill_Id"));
//                cs.setString(2, rs.getString(rs.getString("Bill_Code")));
//                cs.setBoolean(3, billType);
//                cs.setString(4, loginAccEmpId); // set emp_id_Auth khi duy·ªát
//                cs.execute();
//            }
//        }
//        rs.close();
//        Notification.successMessage("C√°c phi·∫øu (T·∫°o) t√¨m ki·∫øm ƒë∆∞·ª£c ƒë√£ ƒë∆∞·ª£c duy·ªát");
//    }

    public static void searchBillForAdminAndUser(Scanner scanner,
                                                 Boolean billType,
                                                 String loginAccEmpId) throws SQLException, ClassNotFoundException {
        String storedProc = "{call SearchBill(?,?,?)}";
        try (CallableStatement cs = DbConnection.getConnection().prepareCall(storedProc)) {
            String keyword;
            Long parseBillId = null;
            String billCode = null;
            do {
                Notification.inputPrint("Nh·∫≠p Bill_ID ho·∫∑c Bill_Code ƒë·ªÉ t√¨m ki·∫øm phi·∫øu " + getTypeName(billType) +
                        ", ho·∫∑c nh·∫≠p (exit) ƒë·ªÉ quay l·∫°i menu: ");

                keyword = scanner.nextLine().trim();
                if (!Validate.isInputValid(keyword)) continue;
                if (keyword.equalsIgnoreCase("exit")) break;
                if (isNumeric(keyword)) {
                    // Input is numeric
                    parseBillId = Long.parseLong(keyword);
                } else {
                    // Input is not numeric
                    billCode = keyword;
                }
//                 check t·ªìn t·∫°i parseBillId ho·∫∑c billCode
                if (!checkExistsBill(parseBillId, billCode, billType)) {
                    Notification.errorMessage("Kh√¥ng t·ªìn t·∫°i Bill ·ªü trong phi·∫øu " + getTypeName(billType) + ", h√£y th·ª≠ l·∫°i!");
                    continue;
                }
                if (parseBillId == null) {
                    cs.setNull(1, Types.BIGINT);
                    cs.setString(2, keyword);
                } else {
                    cs.setLong(1, parseBillId);  //parseBillId equal keyword but in type Long
                    cs.setString(2, keyword);
                }
                cs.setBoolean(3, billType);
                ResultSet rs = cs.executeQuery();
                // User vs admin
                designTableForResultSet(rs);
                // just admin allow actions
                if (loginAccEmpId != null) {
                    String choice;
                    do {
                        Notification.inputPrint(
                                "* B·∫°n c√≥ th·ªÉ nh·∫≠p s·ªë : 1. (update) ƒë·ªÉ ti·∫øn h√†nh ch·ªçn Bill c·∫ßn c·∫≠p nh·∫≠t " + getTypeName(billType) +
                                        "\n* Ho·∫∑c c√≥ th·ªÉ nh·∫≠p s·ªë : 2. (approve) ƒë·ªÉ duy·ªát bill." +
                                        "\n* Ho·∫∑c nh·∫≠p (3) ƒë·ªÉ ti·∫øp t·ª•c t√¨m ki·∫øm ");
                        choice = scanner.nextLine().trim();
                        if (choice.equals("1"))
                            updateBill(scanner, billType, null);
                        else if (choice.equals("2")) {
                            approveBill(scanner, billType, loginAccEmpId);
                        } else if (choice.equals("3"))
                            break;
                        else
                            Notification.errorMessage("Vui l√≤ng ch·ªçn 1 ho·∫∑c 2, ho·∫∑c nh·∫≠p (3) ƒë·ªÉ ti·∫øp t·ª•c t√¨m ki·∫øm");
                    } while (true);
                }
            } while (true);

        }
    }
}
